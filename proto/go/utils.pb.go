// Code generated by protoc-gen-go. DO NOT EDIT.
// source: utils.proto

package utils

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileSegment struct {
	FileSegmentData      []byte   `protobuf:"bytes,1,opt,name=FileSegmentData,proto3" json:"FileSegmentData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSegment) Reset()         { *m = FileSegment{} }
func (m *FileSegment) String() string { return proto.CompactTextString(m) }
func (*FileSegment) ProtoMessage()    {}
func (*FileSegment) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c651f4717a5f2, []int{0}
}

func (m *FileSegment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSegment.Unmarshal(m, b)
}
func (m *FileSegment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSegment.Marshal(b, m, deterministic)
}
func (m *FileSegment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSegment.Merge(m, src)
}
func (m *FileSegment) XXX_Size() int {
	return xxx_messageInfo_FileSegment.Size(m)
}
func (m *FileSegment) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSegment.DiscardUnknown(m)
}

var xxx_messageInfo_FileSegment proto.InternalMessageInfo

func (m *FileSegment) GetFileSegmentData() []byte {
	if m != nil {
		return m.FileSegmentData
	}
	return nil
}

type FileSize struct {
	Size                 string   `protobuf:"bytes,1,opt,name=Size,proto3" json:"Size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSize) Reset()         { *m = FileSize{} }
func (m *FileSize) String() string { return proto.CompactTextString(m) }
func (*FileSize) ProtoMessage()    {}
func (*FileSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_c91c651f4717a5f2, []int{1}
}

func (m *FileSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSize.Unmarshal(m, b)
}
func (m *FileSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSize.Marshal(b, m, deterministic)
}
func (m *FileSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSize.Merge(m, src)
}
func (m *FileSize) XXX_Size() int {
	return xxx_messageInfo_FileSize.Size(m)
}
func (m *FileSize) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSize.DiscardUnknown(m)
}

var xxx_messageInfo_FileSize proto.InternalMessageInfo

func (m *FileSize) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func init() {
	proto.RegisterType((*FileSegment)(nil), "utils.FileSegment")
	proto.RegisterType((*FileSize)(nil), "utils.FileSize")
}

func init() {
	proto.RegisterFile("utils.proto", fileDescriptor_c91c651f4717a5f2)
}

var fileDescriptor_c91c651f4717a5f2 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2d, 0xc9, 0xcc,
	0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xcc, 0xb9, 0xb8, 0xdd,
	0x32, 0x73, 0x52, 0x83, 0x53, 0xd3, 0x73, 0x53, 0xf3, 0x4a, 0x84, 0x34, 0xb8, 0xf8, 0x91, 0xb8,
	0x2e, 0x89, 0x25, 0x89, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0xe8, 0xc2, 0x4a, 0x72, 0x5c,
	0x1c, 0x60, 0xa1, 0xcc, 0xaa, 0x54, 0x21, 0x21, 0x2e, 0x16, 0x10, 0x0d, 0x56, 0xca, 0x19, 0x04,
	0x66, 0x1b, 0xb9, 0x71, 0xb1, 0x86, 0x82, 0x6c, 0x10, 0xb2, 0xe5, 0x12, 0x09, 0x2d, 0xc8, 0xc9,
	0x4f, 0x4c, 0x01, 0x29, 0x77, 0xcc, 0x4b, 0x71, 0x4f, 0x2d, 0x81, 0x68, 0xd2, 0x83, 0x38, 0x07,
	0xc9, 0x60, 0x29, 0x7e, 0x64, 0xb1, 0xcc, 0xaa, 0x54, 0x0d, 0xc6, 0x24, 0x36, 0xb0, 0x73, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x71, 0x09, 0xac, 0x05, 0xbd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UtilsClient is the client API for Utils service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilsClient interface {
	UploadFileAndGetSize(ctx context.Context, opts ...grpc.CallOption) (Utils_UploadFileAndGetSizeClient, error)
}

type utilsClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsClient(cc grpc.ClientConnInterface) UtilsClient {
	return &utilsClient{cc}
}

func (c *utilsClient) UploadFileAndGetSize(ctx context.Context, opts ...grpc.CallOption) (Utils_UploadFileAndGetSizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Utils_serviceDesc.Streams[0], "/utils.Utils/UploadFileAndGetSize", opts...)
	if err != nil {
		return nil, err
	}
	x := &utilsUploadFileAndGetSizeClient{stream}
	return x, nil
}

type Utils_UploadFileAndGetSizeClient interface {
	Send(*FileSegment) error
	CloseAndRecv() (*FileSize, error)
	grpc.ClientStream
}

type utilsUploadFileAndGetSizeClient struct {
	grpc.ClientStream
}

func (x *utilsUploadFileAndGetSizeClient) Send(m *FileSegment) error {
	return x.ClientStream.SendMsg(m)
}

func (x *utilsUploadFileAndGetSizeClient) CloseAndRecv() (*FileSize, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileSize)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UtilsServer is the server API for Utils service.
type UtilsServer interface {
	UploadFileAndGetSize(Utils_UploadFileAndGetSizeServer) error
}

// UnimplementedUtilsServer can be embedded to have forward compatible implementations.
type UnimplementedUtilsServer struct {
}

func (*UnimplementedUtilsServer) UploadFileAndGetSize(srv Utils_UploadFileAndGetSizeServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileAndGetSize not implemented")
}

func RegisterUtilsServer(s *grpc.Server, srv UtilsServer) {
	s.RegisterService(&_Utils_serviceDesc, srv)
}

func _Utils_UploadFileAndGetSize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UtilsServer).UploadFileAndGetSize(&utilsUploadFileAndGetSizeServer{stream})
}

type Utils_UploadFileAndGetSizeServer interface {
	SendAndClose(*FileSize) error
	Recv() (*FileSegment, error)
	grpc.ServerStream
}

type utilsUploadFileAndGetSizeServer struct {
	grpc.ServerStream
}

func (x *utilsUploadFileAndGetSizeServer) SendAndClose(m *FileSize) error {
	return x.ServerStream.SendMsg(m)
}

func (x *utilsUploadFileAndGetSizeServer) Recv() (*FileSegment, error) {
	m := new(FileSegment)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Utils_serviceDesc = grpc.ServiceDesc{
	ServiceName: "utils.Utils",
	HandlerType: (*UtilsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileAndGetSize",
			Handler:       _Utils_UploadFileAndGetSize_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "utils.proto",
}
